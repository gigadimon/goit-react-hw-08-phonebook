{"version":3,"file":"static/js/752.8fa05283.chunk.js","mappings":"iMACA,GAAgB,KAAO,wBAAwB,MAAQ,0B,wFCSxC,SAASA,IACtB,OAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IAuB/B,OACE,iCACIF,IACA,kBAAMG,UAAWC,EAAAA,KAAQC,SAxB/B,SAAsBC,GAGpB,GAFAA,EAAEC,kBAEGX,IAAUF,EACb,OAAOc,EAAAA,GAAAA,MAAY,yBAA0B,CAC3CC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAIdlB,GAASmB,EAAAA,EAAAA,IAAU,CAAErB,MAAAA,EAAOF,SAAAA,KAE5BC,EAAY,IACZE,EAAS,GACV,EAKK,WACE,SAACqB,EAAA,EAAD,CACEC,GAAI,CAAEC,aAAc,QACpBC,KAAK,QACLC,GAAG,iBACHC,MAAM,SACNC,KAAK,QACLC,QAAQ,WACRC,MAAO9B,EACP+B,SAAU,SAAArB,GAAC,OAAIT,EAASS,EAAEsB,OAAOF,MAAtB,KAEb,SAACR,EAAA,EAAD,CACEC,GAAI,CAAEC,aAAc,QACpBC,KAAK,QACLC,GAAG,0BACHC,MAAM,WACNC,KAAK,WACLK,aAAa,mBACbH,MAAOhC,EACPiC,SAAU,SAAArB,GAAC,OAAIX,EAAYW,EAAEsB,OAAOF,MAAzB,KAEb,SAACI,EAAA,EAAD,CAAQN,KAAK,SAASC,QAAQ,YAAYtB,UAAWC,EAAAA,OAArD,wBAMJ,SAAC,KAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"input\":\"LoginForm_input__aQRtt\"};","import s from './LoginForm.module.css';\nimport { TextField } from '@mui/material';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logInUser } from 'redux/authSlice';\nimport { selectLogin } from 'redux/selectors';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Button } from '@mui/material';\n\nexport default function LoginForm() {\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(selectLogin);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!email || !password) {\n      return toast.error('Fields cannot be empty', {\n        position: 'top-right',\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n\n    dispatch(logInUser({ email, password }));\n\n    setPassword('');\n    setEmail('');\n  }\n\n  return (\n    <>\n      {!isLoggedIn && (\n        <form className={s.form} onSubmit={handleSubmit}>\n          <TextField\n            sx={{ marginBottom: '10px' }}\n            size=\"small\"\n            id=\"outlined-basic\"\n            label=\"E-mail\"\n            type=\"email\"\n            variant=\"outlined\"\n            value={email}\n            onChange={e => setEmail(e.target.value)}\n          />\n          <TextField\n            sx={{ marginBottom: '10px' }}\n            size=\"small\"\n            id=\"outlined-password-input\"\n            label=\"Password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n          />\n          <Button type=\"submit\" variant=\"contained\" className={s.button}>\n            Log In\n          </Button>\n        </form>\n      )}\n\n      <ToastContainer />\n    </>\n  );\n}\n"],"names":["LoginForm","useState","password","setPassword","email","setEmail","dispatch","useDispatch","isLoggedIn","useSelector","selectLogin","className","s","onSubmit","e","preventDefault","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","logInUser","TextField","sx","marginBottom","size","id","label","type","variant","value","onChange","target","autoComplete","Button"],"sourceRoot":""}